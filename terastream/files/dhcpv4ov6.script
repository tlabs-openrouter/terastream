#!/bin/sh
[ -z "$1" ] && echo "Error: should be run by udhcpc" && exit 1

. /lib/functions.sh
. /lib/functions/network.sh
. /lib/netifd/netifd-proto.sh

_rulefilename() {
	echo "/tmp/firewall-hotplug/${INTERFACE}.sh"
}

setup_nat() {
		local config="${INTERFACE}"
		local tunnel_if="$(uci -q get network.${config}.dslite_tunnel)"
		local port_range="${port_range_min}-${port_range_max}"
		local to_source="$ip"

		# get device name from logical interface name
		[ -n "$tunnel_if" ] && network_get_device tunnel_if $tunnel_if

		# use same interface if no tunnel interface supplied
		[ -z "$tunnel_if" ] && tunnel_if="$interface"

		# bail out if something's missing
		[ -n "$tunnel_if" -a -n "$to_source" ] || exit 0

		# set uci config values for port range
		uci -q set network.${config}.port_range_min="${port_range_min}"
		uci -q set network.${config}.port_range_max="${port_range_max}"

		[ "$without_portrange" -eq 0 ] && to_source="${to_source}:${port_range}"
		
		if [ "$without_portrange" -eq 0 ]; then 
			logger -t $config "Restricting ports on iface $INTERFACE to ${port_range}."
		else
			logger -t $config "Not restricting ports on iface ${INTERFACE}."
		fi
		
		local mychain="${config}_lw4o6"
		local rulefile="$(_rulefilename $INTERFACE)"
		mkdir -p "$(dirname $rulefile)"
		cat << EOF > "$rulefile"
#!/bin/sh

target_chain="postrouting_rule"

[ "\$ACTION" = "add" ] && {
	iptables -w -t nat -N $mychain
	if [ "$without_portrange" -eq 0 ]; then
		iptables -w -t nat -I $mychain -o "$tunnel_if" -p tcp -j SNAT --to-source $to_source
		iptables -w -t nat -I $mychain -o "$tunnel_if" -p udp -j SNAT --to-source $to_source
		iptables -w -t nat -I $mychain -o "$tunnel_if" -p icmp -j SNAT --to-source $to_source
	else
		iptables -w -t nat -I $mychain -o "$tunnel_if" -j SNAT --to-source $to_source
	fi

	iptables -w -t nat -I \$target_chain -j $mychain
}

[ "\$ACTION" = "remove" ] && {
	iptables -w -t nat -D \$target_chain -j $mychain
	iptables -w -t nat -F $mychain
	iptables -w -t nat -X $mychain
}
	
EOF

chmod a+x "$rulefile"
}

portparams_to_ranges() {
	[ -z "${port_params}" ] && return
	
	local offset="$(echo -n ${port_params} | cut -d ',' -f 1)"
	local psid_len="$(echo -n ${port_params} | cut -d ',' -f 2)"
	local psid="$(echo -n ${port_params} | cut -d ',' -f 3)"
	
	[ "${offset}" -ne "0" ] && {
		logger -t $config "PSID offset needs to be 0 in Lightweight 4over6"
		return
	}
	
	local psid_bin=$(echo "obase=2;${psid}" | bc)
	psid_bin=$(echo -n "0000000000000000${psid_bin}")
	local padded_len=$(echo -n "${psid_bin}" | wc -c)
	psid_bin=$(echo -n "${psid_bin}" | cut -b "$((padded_len - ${psid_len} + 1))-${padded_len}")
	
	local psid_bin_low="${psid_bin}0000000000000000"
	local portset_start=$(echo -n "${psid_bin_low}" | cut -b 1-16)
	
	local psid_bin_high="${psid_bin}1111111111111111"
	local portset_end=$(echo -n "${psid_bin_high}" | cut -b 1-16)
	
	port_range_min=$(echo "ibase=2;${portset_start}" | bc)
	port_range_max=$(echo "ibase=2;${portset_end}" | bc)
}
set_classless_routes() {
	local max=128
	local type
	while [ -n "$1" -a -n "$2" -a $max -gt 0 ]; do
		proto_add_ipv4_route "${1%%/*}" "${1##*/}" "$2"
		max=$(($max-1))
		shift 2
	done
}

setup_interface () {
	proto_init_update "*" 1
	proto_add_ipv4_address "$ip" "${subnet:-255.255.255.0}"
	# TODO: apply $broadcast

	for i in $router; do
		proto_add_ipv4_route 0.0.0.0 0 "$i"
	done

	# CIDR STATIC ROUTES (rfc3442)
	[ -n "$staticroutes" ] && set_classless_routes $staticroutes
	[ -n "$msstaticroutes" ] && set_classless_routes $msstaticroutes

	for dns in $dns; do
		proto_add_dns_server "$dns"
	done
	for domain in $domain; do
		proto_add_dns_search "$domain"
	done

	proto_add_data
	[ -n "$ZONE" ] && json_add_string zone "$ZONE"
	proto_close_data

	if [ "$MODE" = "lw4o6" ]; then
		setup_nat
	fi

	proto_send_update "$INTERFACE"


	if [ "$IFACE6RD" != 0 -a -n "$ip6rd" ]; then
		local v4mask="${ip6rd%% *}"
		ip6rd="${ip6rd#* }"
		local ip6rdprefixlen="${ip6rd%% *}"
		ip6rd="${ip6rd#* }"
		local ip6rdprefix="${ip6rd%% *}"
		ip6rd="${ip6rd#* }"
		local ip6rdbr="${ip6rd%% *}"

		[ -n "$ZONE" ] || ZONE=$(fw3 -q network $INTERFACE)
		[ -z "$IFACE6RD" -o "$IFACE6RD" = 1 ] && IFACE6RD=${INTERFACE}_6rd

		json_init
		json_add_string name "$IFACE6RD"
		json_add_string ifname "@$INTERFACE"
		json_add_string proto "6rd"
		json_add_string peeraddr "$ip6rdbr"
		json_add_int ip4prefixlen "$v4mask"
		json_add_string ip6prefix "$ip6rdprefix"
		json_add_int ip6prefixlen "$ip6rdprefixlen"
		json_add_string tunlink "$INTERFACE"
		[ -n "$IFACE6RD_DELEGATE" ] && json_add_boolean delegate "$IFACE6RD_DELEGATE"
		[ -n "$ZONE6RD" ] || ZONE6RD=$ZONE
		[ -n "$ZONE6RD" ] && json_add_string zone "$ZONE6RD"
		json_close_object

		ubus call network add_dynamic "$(json_dump)"
	fi

	# TODO
	# [ -n "$ntpsrv" ] && 	change_state network "$ifc" lease_ntpsrv "$ntpsrv"
	# [ -n "$timesvr" ] && 	change_state network "$ifc" lease_timesrv "$timesvr"
	# [ -n "$hostname" ] &&	change_state network "$ifc" lease_hostname "$hostname"
	# [ -n "$timezone" ] && 	change_state network "$ifc" lease_timezone "$timezone"
}

deconfig_interface() {
	proto_init_update "*" 0
	proto_send_update "$INTERFACE"
}

[ -n "${port_params}" ] && {
	logger -t $config "using port params ${port_params}"
	portparams_to_ranges
}

without_portrange=0

[ -z "${port_range_min}" -o "${port_range_min}" = "0" ] && without_portrange="1"
[ -z "${port_range_max}" -o "${port_range_max}" = "0" ] && without_portrange="1"

case "$1" in
	deconfig)
		deconfig_interface
	;;
	renew|bound)
		setup_interface
	;;
esac

# user rules
[ -f /etc/udhcpc.user ] && . /etc/udhcpc.user
