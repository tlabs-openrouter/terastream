#!/bin/sh
[ -z "$1" ] && echo "Error: should be run by udhcpc" && exit 1

. /lib/functions.sh
. /lib/functions/network.sh
. /lib/netifd/netifd-proto.sh

portparams_to_ranges() {
	[ -z "${port_params}" ] && return
	
	local offset="$(echo -n ${port_params} | cut -d ',' -f 1)"
	local psid_len="$(echo -n ${port_params} | cut -d ',' -f 2)"
	local psid="$(echo -n ${port_params} | cut -d ',' -f 3)"
	
	[ "${offset}" -ne "0" ] && {
		logger -t $config "PSID offset needs to be 0 in Lightweight 4over6"
		return
	}
	
	local psid_bin=$(echo "obase=2;${psid}" | bc)
	psid_bin=$(echo -n "0000000000000000${psid_bin}")
	local padded_len=$(echo -n "${psid_bin}" | wc -c)
	psid_bin=$(echo -n "${psid_bin}" | cut -b "$((padded_len - ${psid_len} + 1))-${padded_len}")
	
	local psid_bin_low="${psid_bin}0000000000000000"
	local portset_start=$(echo -n "${psid_bin_low}" | cut -b 1-16)
	
	local psid_bin_high="${psid_bin}1111111111111111"
	local portset_end=$(echo -n "${psid_bin_high}" | cut -b 1-16)
	
	port_range_min=$(echo "ibase=2;${portset_start}" | bc)
	port_range_max=$(echo "ibase=2;${portset_end}" | bc)
}
set_classless_routes() {
	local max=128
	local type
	while [ -n "$1" -a -n "$2" -a $max -gt 0 ]; do
		proto_add_ipv4_route "${1%%/*}" "${1##*/}" "$2"
		max=$(($max-1))
		shift 2
	done
}

setup_interface () {
	proto_init_update "*" 1

	proto_add_ipv4_address "$ip" "${subnet:-255.255.255.0}"

	if [ -z "$AFTR_REMOTE" ]; then
		# TODO: apply $broadcast

		for i in $router; do
			proto_add_ipv4_route 0.0.0.0 0 "$i"
		done

		# CIDR STATIC ROUTES (rfc3442)
		[ -n "$staticroutes" ] && set_classless_routes $staticroutes
		[ -n "$msstaticroutes" ] && set_classless_routes $msstaticroutes
	fi

	for dns in $dns; do
		proto_add_dns_server "$dns"
	done
	for domain in $domain; do
		proto_add_dns_search "$domain"
	done

	[ -n "${port_params}" ] && {
		logger -t $config "using port params ${port_params}"
		portparams_to_ranges
	}

	without_portrange=0

	[ -z "${port_range_min}" -o "${port_range_min}" = "0" ] && without_portrange="1"
	[ -z "${port_range_max}" -o "${port_range_max}" = "0" ] && without_portrange="1"

	proto_add_data
	[ -n "$ZONE" ] && json_add_string zone "$ZONE"
	if [ "$MODE" = "lw4o6" -a -n "$AFTR_REMOTE" -a "$without_portrange" != "1" ]; then
			json_add_string portrange "$port_range_min-$port_range_max"
	fi
	proto_close_data

	proto_send_update "$INTERFACE"

	if [ "$MODE" = "lw4o6" -a -n "$AFTR_REMOTE" ]; then
		json_init
		json_add_string name "${TUNLINK}_4"
		json_add_string proto "lw4o6l"
		json_add_string ipaddr "$ip"
		json_add_string ip6addr "$AFTR_LOCAL"
		json_add_string peeraddr "$AFTR_REMOTE"
		json_add_string tunlink "$TUNLINK"

		if [ "$without_portrange" = "1"  ]; then
			json_add_int port_range_min "0"
			json_add_int port_range_max "0"
		else
			json_add_int port_range_min "$port_range_min"
			json_add_int port_range_max "$port_range_max"
		fi

		json_add_int mtu 1500
		json_add_boolean delegate "0"
		json_close_object
		ubus -S call network add_dynamic "$(json_dump)"
	fi

	# TODO
	# [ -n "$ntpsrv" ] && 	change_state network "$ifc" lease_ntpsrv "$ntpsrv"
	# [ -n "$timesvr" ] && 	change_state network "$ifc" lease_timesrv "$timesvr"
	# [ -n "$hostname" ] &&	change_state network "$ifc" lease_hostname "$hostname"
	# [ -n "$timezone" ] && 	change_state network "$ifc" lease_timezone "$timezone"
}

deconfig_interface() {
	proto_init_update "*" 0
	proto_send_update "$INTERFACE"
}


case "$1" in
	deconfig)
		deconfig_interface
	;;
	renew|bound)
		setup_interface
	;;
esac

# user rules
[ -f /etc/udhcpc.user ] && . /etc/udhcpc.user
