diff --git a/src/dhcpv6.c b/src/dhcpv6.c
index 15006ec..6b5a6f5 100644
--- a/src/dhcpv6.c
+++ b/src/dhcpv6.c
@@ -953,6 +953,7 @@ static int dhcpv6_handle_reply(enum dhcpv6_msg orig, _unused const int rc,
 		odhcp6c_clear_state(STATE_DHCP4O6_SERVERS_88);
 		odhcp6c_clear_state(STATE_DHCP4O6_SERVERS_99);
 		odhcp6c_clear_state(STATE_NCS_FQDN);
+		odhcp6c_clear_state(STATE_SYSLOG_COLLECTORS);
 
 		// Parse and find all matching IAs
 		dhcpv6_for_each_option(opt, end, otype, olen, odata) {
@@ -1104,6 +1105,9 @@ static int dhcpv6_handle_reply(enum dhcpv6_msg orig, _unused const int rc,
 				odhcp6c_get_state(STATE_NCS_FQDN, &cur_len);
 				if (cur_len == 0)
 					odhcp6c_add_state(STATE_NCS_FQDN, odata, olen);
+			} else if (otype == DHCPV6_OPT_SYSLOG_COLLECTORS) {
+				if (olen % 16 == 0)
+					odhcp6c_add_state(STATE_SYSLOG_COLLECTORS, odata, olen);
 			} else {
 				odhcp6c_add_state(STATE_CUSTOM_OPTS, &odata[-4], olen + 4);
 			}
diff --git a/src/odhcp6c.h b/src/odhcp6c.h
index 05e41e9..345c33d 100644
--- a/src/odhcp6c.h
+++ b/src/odhcp6c.h
@@ -81,6 +81,7 @@ enum dhcvp6_opt {
 	DHCPV6_OPT_S46_CONT_LW = 96,
 
 	DHCPV6_OPT_DHCP4_O_DHCP6_SERVER_99 = 99,
+	DHCPV6_OPT_SYSLOG_COLLECTORS = 197,
 	DHCPV6_OPT_NCS_FQDN = 198,
 };
 
@@ -270,6 +271,7 @@ enum odhcp6c_state {
 	STATE_PASSTHRU,
 	STATE_DHCP4O6_SERVERS_88,
 	STATE_DHCP4O6_SERVERS_99,
+	STATE_SYSLOG_COLLECTORS,
 	STATE_NCS_FQDN,
 	_STATE_MAX
 };
diff --git a/src/script.c b/src/script.c
index b5b5678..bd9d7dd 100644
--- a/src/script.c
+++ b/src/script.c
@@ -374,6 +374,7 @@ void script_call(const char *status, int delay, bool resume)
 		size_t sip_ip_len, sip_fqdn_len, aftr_name_len, cer_len, addr_len;
 		size_t s46_mapt_len, s46_mape_len, s46_lw_len, passthru_len;
 		size_t fos_88_len, fos_99_len, ncs_fqdn_len, client_id_len;
+		size_t syslog_collectors_len;
 
 		signal(SIGTERM, SIG_DFL);
 		if (delay > 0) {
@@ -411,6 +412,8 @@ void script_call(const char *status, int delay, bool resume)
 
 		uint8_t *client_id = odhcp6c_get_state(STATE_CLIENT_ID, &client_id_len);
 
+		struct in6_addr *syslog_collectors = odhcp6c_get_state(STATE_SYSLOG_COLLECTORS, &syslog_collectors_len);
+
 		ipv6_to_env("SERVER", addr, addr_len / sizeof(*addr));
 		ipv6_to_env("RDNSS", dns, dns_len / sizeof(*dns));
 		ipv6_to_env("SNTP_IP", sntp, sntp_ip_len / sizeof(*sntp));
@@ -428,6 +431,7 @@ void script_call(const char *status, int delay, bool resume)
 		s46_to_env(STATE_S46_MAPT, s46_mapt, s46_mapt_len);
 		s46_to_env(STATE_S46_LW, s46_lw, s46_lw_len);
 		bin_to_env(custom, custom_len);
+		ipv6_to_env("SYSLOG_COLLECTORS", syslog_collectors, syslog_collectors_len / sizeof(*syslog_collectors));
 
 		if (odhcp6c_is_bound()) {
 			entry_to_env("PREFIXES", prefix, prefix_len, ENTRY_PREFIX);
