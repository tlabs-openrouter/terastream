--- a/networking/udhcp/Config.src
+++ b/networking/udhcp/Config.src
@@ -150,3 +150,12 @@ config FEATURE_DHCP4o6C
 	  However, to activate this mechanism flag -6 must be used when
 	  starting udhcpc.
 
+config FEATURE_V4_PORTPARAMS
+	bool "Dynamic Shared IPv4 Allocation port range"
+	default y
+	depends on UDHCPC
+	help
+	  Include Draft Dynamic Shared IPv4 Allocation PORTPARAMS option.
+	  PORTPARAMS determine the port set a client is allowed to use within
+	  a shared v4 address environment.
+
--- a/networking/udhcp/common.c
+++ b/networking/udhcp/common.c
@@ -67,6 +67,9 @@ const struct dhcp_optflag dhcp_optflags[
 	{ OPTION_6RD                              , DHCP_6RD },
 	{ OPTION_U16                              , DHCP_PORT_RANGE_MIN },
 	{ OPTION_U16                              , DHCP_PORT_RANGE_MAX },
+#if ENABLE_FEATURE_V4_PORTPARAMS
+	{ OPTION_U32                 | OPTION_REQ , DHCP_V4_PORTPARAMS },
+#endif
 	{ OPTION_STATIC_ROUTES | OPTION_LIST      , DHCP_MS_STATIC_ROUTES },
 	{ OPTION_STRING                           , DHCP_WPAD },
 
@@ -137,6 +140,9 @@ const char dhcp_option_strings[] ALIGN1
 	"ip6rd" "\0"       /* DHCP_6RD            */
 	"port_range_min" "\0" /* DHCP_PORT_RANGE_MIN */
 	"port_range_max" "\0" /* DHCP_PORT_RANGE_MAX */
+#if ENABLE_FEATURE_V4_PORTPARAMS
+	"port_params" "\0" /* DHCP_V4_PORTPARAMS */
+#endif
 	"msstaticroutes""\0"/* DHCP_MS_STATIC_ROUTES */
 	"wpad" "\0"        /* DHCP_WPAD           */
 	;
--- a/networking/udhcp/common.h
+++ b/networking/udhcp/common.h
@@ -150,6 +150,7 @@ enum {
 #define DHCP_STATIC_ROUTES      0x79 /* RFC 3442. (mask,ip,router) tuples */
 #define DHCP_VLAN_ID            0x84 /* 802.1P VLAN ID */
 #define DHCP_VLAN_PRIORITY      0x85 /* 802.1Q VLAN priority */
+#define DHCP_V4_PORTPARAMS      0x9f /* RFC 7618 Port Parameters */
 #define DHCP_PXE_CONF_FILE      0xd1 /* RFC 5071 Configuration File */
 #define DHCP_PXE_PATH_PREFIX    0xd2 /* RFC 5071 Configuration File */
 #define DHCP_6RD                0xd4
@@ -198,6 +199,16 @@ struct optionlength_bounds {
 	uint8_t max;
 };
 
+#if ENABLE_FEATURE_V4_PORTPARAMS
+
+struct v4_portparams {
+	uint8_t offset;
+	uint8_t psid_len;
+	uint16_t psid;
+} PACKED;
+
+#endif
+
 extern const struct optionlength_bounds dhcp_option_lengths[];
 
 unsigned FAST_FUNC udhcp_option_idx(const char *name);
--- a/networking/udhcp/dhcpc.c
+++ b/networking/udhcp/dhcpc.c
@@ -211,7 +211,7 @@ static int good_hostname(const char *nam
 #endif
 
 /* Create "opt_name=opt_value" string */
-static NOINLINE char *xmalloc_optname_optval(uint8_t *option, const struct dhcp_optflag *optflag, const char *opt_name)
+static NOINLINE char *xmalloc_optname_optval(uint8_t *option, const struct dhcp_optflag *optflag, uint8_t code, const char *opt_name)
 {
 	unsigned upper_length;
 	int len, type, optlen;
@@ -222,8 +222,13 @@ static NOINLINE char *xmalloc_optname_op
 
 	type = optflag->flags & OPTION_TYPE_MASK;
 	optlen = dhcp_option_lengths[type].min;
-	upper_length = len_of_option_as_string[type]
-		* ((unsigned)(len + optlen - 1) / (unsigned)optlen);
+
+	if (code == DHCP_V4_PORTPARAMS) {
+		upper_length = strlen("255,255,65535") - 1; /* offset,length,psid */
+	} else {
+		upper_length = len_of_option_as_string[type]
+			* ((unsigned)(len + optlen - 1) / (unsigned)optlen);
+	}
 
 	dest = ret = xmalloc(upper_length + strlen(opt_name) + 2);
 	dest += sprintf(ret, "%s=", opt_name);
@@ -252,9 +257,20 @@ static NOINLINE char *xmalloc_optname_op
 		}
 		case OPTION_S32:
 		case OPTION_U32: {
-			uint32_t val_u32;
-			move_from_unaligned32(val_u32, option);
-			dest += sprintf(dest, type == OPTION_U32 ? "%lu" : "%ld", (unsigned long) ntohl(val_u32));
+			if (code == DHCP_V4_PORTPARAMS) {
+				struct v4_portparams portparams;
+				memcpy(&portparams, option, 4);
+				portparams.psid = ntohs(portparams.psid);
+
+				dest += sprintf(dest, "%u,", portparams.offset);
+				dest += sprintf(dest, "%u,", portparams.psid_len);
+				dest += sprintf(dest, "%u", portparams.psid);
+			} else {
+				uint32_t val_u32;
+				move_from_unaligned32(val_u32, option);
+				dest += sprintf(dest, type == OPTION_U32 ? "%lu" : "%ld", (unsigned long) ntohl(val_u32));
+			}
+
 			break;
 		}
 		/* Note: options which use 'return' instead of 'break'
@@ -513,7 +529,7 @@ static char **fill_envp(struct dhcp_pack
 			goto next;
 		*found_ptr &= ~found_mask; /* leave only unknown options */
 		temp = opthash_lookup_simple(code, &opt_len);
-		*curr = xmalloc_optname_optval(temp, &dhcp_optflags[i], opt_name);
+		*curr = xmalloc_optname_optval(temp, &dhcp_optflags[i], code, opt_name);
 		putenv(*curr++);
 		if (code == DHCP_SUBNET) {
 			/* Subnet option: make things like "$ip/$mask" possible */
@@ -628,6 +644,21 @@ static void add_client_options(struct dh
 		udhcp_add_binary_option(packet, client_config.hostname);
 	if (client_config.fqdn)
 		udhcp_add_binary_option(packet, client_config.fqdn);
+#if ENABLE_FEATURE_V4_PORTPARAMS
+	if (client_config.portparams.psid_len != 0) {
+		struct v4_portparams portparams;
+		uint8_t data[6];
+
+		memcpy(&portparams, &client_config.portparams, 4);
+		portparams.psid = htons(portparams.psid);
+
+		data[0] = DHCP_V4_PORTPARAMS;
+		data[1] = 4;
+		memcpy(&data[2], &portparams, 4);
+
+		udhcp_add_binary_option(packet, data);
+	}
+#endif
 
 	/* Request broadcast replies if we have no IP addr */
 	if ((option_mask32 & OPT_B) && packet->ciaddr == 0)
@@ -1279,7 +1310,7 @@ static void client_background(void)
 int udhcpc_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
 int udhcpc_main(int argc UNUSED_PARAM, char **argv)
 {
-	uint8_t *message;
+	uint8_t *message, *portparams;
 	const char *str_V, *str_h, *str_F, *str_r;
 	IF_FEATURE_UDHCPC_ARPING(const char *str_a = "2000";)
 	IF_FEATURE_UDHCP_PORT(char *str_P;)
@@ -1437,6 +1468,10 @@ int udhcpc_main(int argc UNUSED_PARAM, c
 	}
 #endif
 
+#if ENABLE_FEATURE_V4_PORTPARAMS
+	client_config.portparams = (struct v4_portparams) { 0, 0, 0 };
+#endif
+
 	/* Make sure fd 0,1,2 are open */
 	bb_sanitize_stdio();
 	/* Equivalent of doing a fflush after every \n */
@@ -1717,6 +1752,21 @@ int udhcpc_main(int argc UNUSED_PARAM, c
 			continue;
 		}
 
+#if ENABLE_FEATURE_V4_PORTPARAMS
+		portparams = opthash_lookup_simple(DHCP_V4_PORTPARAMS, &opt_len);
+		if (portparams) {
+			if (opt_len == 4) {
+				memcpy(&client_config.portparams, portparams, 4);
+				client_config.portparams.psid = ntohs(client_config.portparams.psid);
+			} else {
+				bb_error_msg("port params size mismatch");
+			}
+
+			if(client_config.portparams.psid_len == 0)
+				client_config.portparams = (struct v4_portparams) { 0, 0, 0 };
+		}
+#endif
+
 		switch (state) {
 		case INIT_SELECTING:
 			/* Must be a DHCPOFFER */
@@ -1789,7 +1839,7 @@ int udhcpc_main(int argc UNUSED_PARAM, c
 						lease_seconds = 0x0fffffff;
 				}
 #if ENABLE_FEATURE_UDHCPC_ARPING
-				if (opt & OPT_a) {
+				if ((opt & OPT_a) && client_config.portparams.psid_len == 0) {
 /* RFC 2131 3.1 paragraph 5:
  * "The client receives the DHCPACK message with configuration
  * parameters. The client SHOULD perform a final check on the
--- a/networking/udhcp/dhcpc.h
+++ b/networking/udhcp/dhcpc.h
@@ -22,6 +22,7 @@ struct client_config_t {
 	uint8_t *fqdn;                  /* Optional fully qualified domain name to use */
 
 	IF_FEATURE_DHCP4o6C(int mode4o6; /* DHCPv4 over DHCPv6 mode */)
+	IF_FEATURE_V4_PORTPARAMS(struct v4_portparams portparams;)
 
 	uint16_t first_secs;
 	uint16_t last_secs;
